// CodeGear C++Builder
// Copyright (c) 1995, 2021 by Embarcadero Technologies, Inc.
// All rights reserved

// (DO NOT EDIT: machine generated header) 'Mitov.Containers.List.pas' rev: 35.00 (Windows)
// This file is modified to improve C++ Builder compatibility.

#ifndef Mitov_Containers_ListHPP
#define Mitov_Containers_ListHPP

#pragma delphiheader begin
#pragma option push
#pragma option -w-      // All warnings off
#pragma option -Vx      // Zero-length empty class member 
#pragma pack(push,8)
#include <System.hpp>
#include <SysInit.hpp>
#include <System.Classes.hpp>
#include <System.SysUtils.hpp>
#include <System.Generics.Defaults.hpp>
#include <System.Generics.Collections.hpp>
#include <Mitov.Containers.Common.hpp>
#include <System.TypInfo.hpp>
#include <System.Rtti.hpp>
#include <Mitov.Attributes.hpp>
#include <Mitov.Containers.Utils.hpp>
#include <System.Types.hpp>

//-- user supplied -----------------------------------------------------------
template<typename T> class DELPHICLASS TLinkedList__1;
template<typename T> class DELPHICLASS TReadArrayList__1;
template<typename T> class DELPHICLASS TArrayList__1;
  #ifdef MANAGED_INTERFACE_OPERATORS
    #define __OLD__MANAGED_INTERFACE_OPERATORS__
    #undef MANAGED_INTERFACE_OPERATORS
  #endif // MANAGED_INTERFACE_OPERATORS

namespace Mitov
{
namespace Containers
{
namespace List
{
//-- forward type declarations -----------------------------------------------
template<typename T> __interface DELPHIINTERFACE ILinkedList__1;
#ifdef __clang__
template<typename T> using _di_ILinkedList__1 =  ::System::DelphiInterface<ILinkedList__1<T>>;
#endif
template<typename T> __interface DELPHIINTERFACE IArrayList__1;
#ifdef __clang__
template<typename T> using _di_IArrayList__1 =  ::System::DelphiInterface<IArrayList__1<T>>;
#endif
__interface DELPHIINTERFACE IChangeNotifySupport;
typedef  ::System::DelphiInterface<IChangeNotifySupport> _di_IChangeNotifySupport;
class DELPHICLASS TChangeNotifySupport;
class DELPHICLASS TInterfacedChangeNotifyObject;
struct TInterfacedChangeNotifyItem;
template<typename T> class DELPHICLASS TTypedInterfacedChangeNotifyObject__1;
template<typename T> class DELPHICLASS TLinkedList__1;
template<typename T> class DELPHICLASS TArrayList__1;
__interface DELPHIINTERFACE IStringArrayList;
typedef  ::System::DelphiInterface<IStringArrayList> _di_IStringArrayList;
class DELPHICLASS TStringArrayList;
__interface DELPHIINTERFACE IObjectArrayList;
typedef  ::System::DelphiInterface<IObjectArrayList> _di_IObjectArrayList;
class DELPHICLASS TObjectArrayList;
class DELPHICLASS Algorithm;
//-- type declarations -------------------------------------------------------
// Template declaration generated by Delphi parameterized types is
// used only for accessing Delphi variables and fields.
// Don't instantiate with new type parameters in user code.
template<typename T> __interface  INTERFACE_UUID("{755EACF6-A7BC-4EA5-AF72-A6FC7D7155C2}") ILinkedList__1  : public  ::Mitov::Containers::Common::IEnumerable__1<T> 
{
	virtual int __fastcall GetCount() = 0 ;
	virtual T __fastcall Last() = 0 /* overload */;
	virtual bool __fastcall Last(/* out */ T &ARes) = 0 /* overload */;
	virtual  ::System::DelphiInterface<ILinkedList__1<T> > __fastcall ForLast(const  ::System::DelphiInterface< ::Mitov::Containers::Common::TConstProc__1<T> > AProc) = 0 ;
	virtual T __fastcall PopFirst() = 0 /* overload */;
	virtual  ::System::DelphiInterface<ILinkedList__1<T> > __fastcall PopFirst(/* out */ T &ARes) = 0 /* overload */;
	virtual  ::System::DelphiInterface<ILinkedList__1<T> > __fastcall PopFirst(const  ::System::DelphiInterface< ::Mitov::Containers::Common::TConstProc__1<T> > AProc) = 0 /* overload */;
	virtual bool __fastcall IfPopFirst(/* out */ T &ARes) = 0 /* overload */;
	virtual bool __fastcall IfPopFirst(const  ::System::DelphiInterface< ::Mitov::Containers::Common::TConstProc__1<T> > AProc) = 0 /* overload */;
	virtual  ::System::DelphiInterface<ILinkedList__1<T> > __fastcall Add(const T AItem, unsigned ACount = (unsigned)(0x1)) = 0 ;
	virtual  ::System::DelphiInterface<ILinkedList__1<T> > __fastcall AddUnique(const T AItem) = 0 ;
	virtual  ::System::DelphiInterface<ILinkedList__1<T> > __fastcall AddFirst(const T AItem) = 0 ;
	virtual  ::System::DelphiInterface<ILinkedList__1<T> > __fastcall Append(const  ::System::DelphiInterface< ::Mitov::Containers::Common::IEnumerable__1<T> > AOther) = 0 /* overload */;
	virtual  ::System::DelphiInterface<ILinkedList__1<T> > __fastcall Append(const T *AItems, const int AItems_High) = 0 /* overload */;
	virtual  ::System::DelphiInterface<ILinkedList__1<T> > __fastcall Append( ::System::Generics::Collections::TEnumerator__1<T>* const AEnumerator) = 0 /* overload */;
	virtual  ::System::DelphiInterface<ILinkedList__1<T> > __fastcall Append(const  ::System::DelphiInterface< ::System::IEnumerator__1<T> > AEnumerator) = 0 /* overload */;
	virtual T __fastcall FindOrAdd(const  ::System::DelphiInterface< ::Mitov::Containers::Common::TConstFunc__2<T,bool> > ACompareFunc, const  ::System::DelphiInterface< ::System::Sysutils::TFunc__1<T> > ACreateFunc) = 0 /* overload */;
	virtual T __fastcall FindOrAdd(const  ::System::DelphiInterface< ::Mitov::Containers::Common::TConstFunc__2<T,bool> > ACompareFunc, const T AItem) = 0 /* overload */;
	virtual  ::System::DelphiInterface<ILinkedList__1<T> > __fastcall Assign(const  ::System::DelphiInterface< ::Mitov::Containers::Common::IEnumerable__1<T> > AOther) = 0 ;
	virtual bool __fastcall FindAndRemoveOne(const T AItem) = 0 /* overload */;
	virtual bool __fastcall FindAndRemoveOne(const  ::System::DelphiInterface< ::Mitov::Containers::Common::TConstFunc__2<T,bool> > ACompareFunc, /* out */ T &ARes) = 0 /* overload */;
	virtual  ::System::DelphiInterface<ILinkedList__1<T> > __fastcall FindAndRemoveOne(const  ::System::DelphiInterface< ::Mitov::Containers::Common::TConstFunc__2<T,bool> > ACompareFunc, const  ::System::DelphiInterface< ::Mitov::Containers::Common::TConstProc__1<T> > AFoundProc) = 0 /* overload */;
	virtual  ::System::DelphiInterface<ILinkedList__1<T> > __fastcall RemoveOne(const T AItem) = 0 /* overload */;
	virtual  ::System::DelphiInterface<ILinkedList__1<T> > __fastcall RemoveOne(const  ::System::DelphiInterface< ::Mitov::Containers::Common::TConstFunc__2<T,bool> > ACompareFunc) = 0 /* overload */;
	virtual  ::System::DelphiInterface<ILinkedList__1<T> > __fastcall RemoveAll(const T AItem) = 0 /* overload */;
	virtual  ::System::DelphiInterface<ILinkedList__1<T> > __fastcall RemoveAll(const  ::System::DelphiInterface< ::Mitov::Containers::Common::TConstFunc__2<T,bool> > ACompareFunc, const  ::System::DelphiInterface< ::Mitov::Containers::Common::TConstProc__1<T> > AFoundProc = ( ::System::DelphiInterface< ::Mitov::Containers::Common::TConstProc__1<T> >)(0x0)) = 0 /* overload */;
	virtual  ::System::DelphiInterface<ILinkedList__1<T> > __fastcall Clear() = 0 ;
	virtual  ::System::DelphiInterface< ::Mitov::Containers::Common::IContainerQuery__3< ::System::DelphiInterface<ILinkedList__1<T> >, ::System::DelphiInterface<ILinkedList__1<T> >,T> > __fastcall Query() = 0 ;
	__property int Count = {read=GetCount};
};

// Template declaration generated by Delphi parameterized types is
// used only for accessing Delphi variables and fields.
// Don't instantiate with new type parameters in user code.
template<typename T> __interface  INTERFACE_UUID("{B15CDC27-7A72-49FC-A4C4-FC8F6B74D246}") IArrayList__1  : public  ::Mitov::Containers::Common::IReverseEnumerable__1<T> 
{
	
public:
	T operator[](int AIndex) { return this->Items[AIndex]; }
	virtual int __fastcall GetCount() = 0 ;
	virtual T __fastcall GetItem(int AIndex) = 0 ;
	virtual void __fastcall SetItem(int AIndex, const T AItem) = 0 ;
	virtual  ::System::DelphiInterface<IArrayList__1<T> > __fastcall Insert(int AIndex, const T AItem) = 0 /* overload */;
	virtual  ::System::DelphiInterface<IArrayList__1<T> > __fastcall Insert(int AIndex, const  ::System::DelphiInterface< ::Mitov::Containers::Common::IEnumerable__1<T> > AOther) = 0 /* overload */;
	virtual T __fastcall FindOrAdd(const  ::System::DelphiInterface< ::Mitov::Containers::Common::TConstFunc__2<T,bool> > ACompareFunc, const  ::System::DelphiInterface< ::System::Sysutils::TFunc__1<T> > ACreateFunc) = 0 /* overload */;
	virtual T __fastcall FindOrAdd(const  ::System::DelphiInterface< ::Mitov::Containers::Common::TConstFunc__2<T,bool> > ACompareFunc, const T AItem) = 0 /* overload */;
	virtual  ::System::DelphiInterface<IArrayList__1<T> > __fastcall Add(const T AItem, unsigned ACount = (unsigned)(0x1)) = 0 ;
	virtual  ::System::DelphiInterface<IArrayList__1<T> > __fastcall AddFront(const T AItem) = 0 ;
	virtual  ::System::DelphiInterface<IArrayList__1<T> > __fastcall AddUnique(const T AItem) = 0 ;
	virtual bool __fastcall FindAndRemoveOne(const T AItem) = 0 /* overload */;
	virtual bool __fastcall FindAndRemoveOne(const  ::System::DelphiInterface< ::Mitov::Containers::Common::TConstFunc__2<T,bool> > ACompareFunc, /* out */ T &ARes) = 0 /* overload */;
	virtual  ::System::DelphiInterface<IArrayList__1<T> > __fastcall FindAndRemoveOne(const  ::System::DelphiInterface< ::Mitov::Containers::Common::TConstFunc__2<T,bool> > ACompareFunc, const  ::System::DelphiInterface< ::Mitov::Containers::Common::TConstProc__1<T> > AFoundProc) = 0 /* overload */;
	virtual int __fastcall RemoveOne(const T AItem) = 0 /* overload */;
	virtual  ::System::DelphiInterface<IArrayList__1<T> > __fastcall RemoveOne(const  ::System::DelphiInterface< ::Mitov::Containers::Common::TConstFunc__2<T,bool> > ACompareFunc) = 0 /* overload */;
	virtual bool __fastcall IfRemoveOne(const  ::System::DelphiInterface< ::Mitov::Containers::Common::TConstFunc__2<T,bool> > ACompareFunc) = 0 /* overload */;
	virtual  ::System::DelphiInterface<IArrayList__1<T> > __fastcall RemoveAll(const T AItem) = 0 /* overload */;
	virtual  ::System::DelphiInterface<IArrayList__1<T> > __fastcall RemoveAll(const  ::System::DelphiInterface< ::Mitov::Containers::Common::IEnumerable__1<T> > AOther) = 0 /* overload */;
	virtual  ::System::DelphiInterface<IArrayList__1<T> > __fastcall RemoveAll(const  ::System::DelphiInterface< ::Mitov::Containers::Common::TConstFunc__2<T,bool> > ACompareFunc, const  ::System::DelphiInterface< ::Mitov::Containers::Common::TConstProc__1<T> > AFoundProc = ( ::System::DelphiInterface< ::Mitov::Containers::Common::TConstProc__1<T> >)(0x0)) = 0 /* overload */;
	virtual  ::System::DelphiInterface<IArrayList__1<T> > __fastcall Delete(int AIndex) = 0 /* overload */;
	virtual  ::System::DelphiInterface<IArrayList__1<T> > __fastcall Delete(int AIndex, int ACount) = 0 /* overload */;
	virtual  ::System::DelphiInterface<IArrayList__1<T> > __fastcall Swap(int AIndex1, int AIndex2) = 0 ;
	virtual  ::System::DelphiInterface<IArrayList__1<T> > __fastcall Clear() = 0 ;
	virtual  ::System::DelphiInterface<IArrayList__1<T> > __fastcall Sort(const  ::System::DelphiInterface< ::System::Generics::Defaults::TComparison__1<T> > ACompareFunc = ( ::System::DelphiInterface< ::System::Generics::Defaults::TComparison__1<T> >)(0x0)) = 0 /* overload */;
	virtual  ::System::DelphiInterface<IArrayList__1<T> > __fastcall Append(const  ::System::DelphiInterface< ::Mitov::Containers::Common::IEnumerable__1<T> > AOther) = 0 /* overload */;
	virtual  ::System::DelphiInterface<IArrayList__1<T> > __fastcall Append(const T *AItems, const int AItems_High) = 0 /* overload */;
	virtual  ::System::DelphiInterface<IArrayList__1<T> > __fastcall Append( ::System::Generics::Collections::TEnumerator__1<T>* const AEnumerator) = 0 /* overload */;
	virtual  ::System::DelphiInterface<IArrayList__1<T> > __fastcall Append(const  ::System::DelphiInterface< ::System::IEnumerator__1<T> > AEnumerator) = 0 /* overload */;
	virtual  ::System::DelphiInterface<IArrayList__1<T> > __fastcall Assign(const  ::System::DelphiInterface< ::Mitov::Containers::Common::IEnumerable__1<T> > AOther) = 0 ;
	virtual  ::System::DynamicArray<T> __fastcall ToArray() = 0 ;
	virtual  ::System::DelphiInterface< ::Mitov::Containers::Common::IContainerQuery__3< ::System::DelphiInterface<IArrayList__1<T> >, ::System::DelphiInterface<IArrayList__1<T> >,T> > __fastcall Query(bool AReverse = false) = 0 ;
	__property int Count = {read=GetCount};
	__property T Items[int AIndex] = {read=GetItem, write=SetItem/*, default*/};
};

__interface  INTERFACE_UUID("{EA8C9C8C-3CD6-43EF-8C70-3D1B7E6AEA1A}") IChangeNotifySupport  : public  ::System::IInterface 
{
	virtual void __fastcall ChangeNotify() = 0 ;
	virtual  ::System::Sysutils::_di_TProc __fastcall AddChangeNotification(const  ::System::Sysutils::_di_TProc AProc) = 0 ;
	virtual bool __fastcall RemoveChangeNotification(const  ::System::Sysutils::_di_TProc AProc) = 0 ;
	virtual  ::System::Sysutils::_di_TProc __fastcall AddDestroyNotification(const  ::System::Sysutils::_di_TProc AProc) = 0 ;
	virtual bool __fastcall RemoveDestroyNotification(const  ::System::Sysutils::_di_TProc AProc) = 0 ;
};

#pragma pack(push,4)
class PASCALIMPLEMENTATION TChangeNotifySupport : public  ::System::TInterfacedObject
{
	typedef  ::System::TInterfacedObject inherited;
	
protected:
	 ::System::DelphiInterface<ILinkedList__1<unsigned> > FInNotifyThreadIDList;
	 ::System::DelphiInterface<ILinkedList__1< ::System::Sysutils::_di_TProc> > FChangeNotifyList;
	 ::System::DelphiInterface<ILinkedList__1< ::System::Sysutils::_di_TProc> > FDestroyNotifyList;
	
protected:
	void __fastcall ChangeNotify();
	 ::System::Sysutils::_di_TProc __fastcall AddChangeNotification(const  ::System::Sysutils::_di_TProc AProc);
	bool __fastcall RemoveChangeNotification(const  ::System::Sysutils::_di_TProc AProc);
	 ::System::Sysutils::_di_TProc __fastcall AddDestroyNotification(const  ::System::Sysutils::_di_TProc AProc);
	bool __fastcall RemoveDestroyNotification(const  ::System::Sysutils::_di_TProc AProc);
	
public:
	virtual void __fastcall BeforeDestruction();
public:
	/* TObject.Create */ inline __fastcall TChangeNotifySupport() :  ::System::TInterfacedObject() { }
	/* TObject.Destroy */ inline __fastcall virtual ~TChangeNotifySupport() { }
	
private:
	void *__IChangeNotifySupport;	// IChangeNotifySupport 
	
public:
	#if defined(MANAGED_INTERFACE_OPERATORS)
	// {EA8C9C8C-3CD6-43EF-8C70-3D1B7E6AEA1A}
	operator _di_IChangeNotifySupport()
	{
		_di_IChangeNotifySupport intf;
		this->GetInterface(intf);
		return intf;
	}
	#else
	operator IChangeNotifySupport*(void) { return (IChangeNotifySupport*)&__IChangeNotifySupport; }
	#endif
	
};

#pragma pack(pop)

#pragma pack(push,4)
class PASCALIMPLEMENTATION TInterfacedChangeNotifyObject : public  ::System::TInterfacedObject
{
	typedef  ::System::TInterfacedObject inherited;
	
protected:
	_di_IChangeNotifySupport FChangeNotifySupport;
	void __fastcall ChangeNotify();
	
public:
	virtual void __fastcall BeforeDestruction();
	
protected:
	 ::System::Sysutils::_di_TProc __fastcall AddChangeNotification(const  ::System::Sysutils::_di_TProc AProc);
	void __fastcall RemoveChangeNotification(const  ::System::Sysutils::_di_TProc AProc);
	 ::System::Sysutils::_di_TProc __fastcall AddDestroyNotification(const  ::System::Sysutils::_di_TProc AProc);
	void __fastcall RemoveDestroyNotification(const  ::System::Sysutils::_di_TProc AProc);
public:
	/* TObject.Create */ inline __fastcall TInterfacedChangeNotifyObject() :  ::System::TInterfacedObject() { }
	/* TObject.Destroy */ inline __fastcall virtual ~TInterfacedChangeNotifyObject() { }
	
private:
	void *__IChangeNotification;	//  ::Mitov::Containers::Common::IChangeNotification 
	
public:
	#if defined(MANAGED_INTERFACE_OPERATORS)
	// {A926EB37-2FB2-4ADC-9B5C-FB9B9DB19894}
	operator  ::Mitov::Containers::Common::_di_IChangeNotification()
	{
		 ::Mitov::Containers::Common::_di_IChangeNotification intf;
		this->GetInterface(intf);
		return intf;
	}
	#else
	operator  ::Mitov::Containers::Common::IChangeNotification*(void) { return ( ::Mitov::Containers::Common::IChangeNotification*)&__IChangeNotification; }
	#endif
	
};

#pragma pack(pop)

struct DECLSPEC_DRECORD TInterfacedChangeNotifyItem
{
public:
	 ::System::TObject* ObjectItem;
	 ::System::Sysutils::_di_TProc OnChangeProc;
	 ::System::Sysutils::_di_TProc OnDestroyProc;
	__fastcall TInterfacedChangeNotifyItem( ::System::TObject* AObjectItem, const  ::System::Sysutils::_di_TProc AOnChangeProc, const  ::System::Sysutils::_di_TProc AOnDestroyProc);
	TInterfacedChangeNotifyItem() {}
};


#pragma pack(push,4)
// Template declaration generated by Delphi parameterized types is
// used only for accessing Delphi variables and fields.
// Don't instantiate with new type parameters in user code.
template<typename T> class PASCALIMPLEMENTATION TTypedInterfacedChangeNotifyObject__1 : public TInterfacedChangeNotifyObject
{
	typedef TInterfacedChangeNotifyObject inherited;
	
protected:
	 ::System::DelphiInterface<ILinkedList__1<TInterfacedChangeNotifyItem> > FDelegatedNotications;
	void __fastcall DelegateNotify(const T AItem);
	void __fastcall UndelegateNotify(const T AItem);
	void __fastcall UndelegateAll();
	void __fastcall InternalRemoveNotification( ::System::TObject* const AObject);
	
public:
	virtual void __fastcall BeforeDestruction();
public:
	/* TObject.Create */ inline __fastcall TTypedInterfacedChangeNotifyObject__1() : TInterfacedChangeNotifyObject() { }
	/* TObject.Destroy */ inline __fastcall virtual ~TTypedInterfacedChangeNotifyObject__1() { }
	
};

#pragma pack(pop)

#pragma pack(push,4)
// Template declaration generated by Delphi parameterized types is
// used only for accessing Delphi variables and fields.
// Don't instantiate with new type parameters in user code.
template<typename T> class PASCALIMPLEMENTATION TLinkedList__1 : public TTypedInterfacedChangeNotifyObject__1<T>
{
	typedef TTypedInterfacedChangeNotifyObject__1<T> inherited;
	
	
protected:
	#pragma pack(push,8)
	// Template declaration generated by Delphi parameterized types is
	// used only for accessing Delphi variables and fields.
	// Don't instantiate with new type parameters in user code.
	struct DECLSPEC_DRECORD TNode
	{
		
	public:
		typedef TLinkedList__1<T>::TNode *PNode;
		
		typedef PNode *PPNode;
		
		
	public:
		PNode Next;
		T Data;
		bool Deleted;
	};
	#pragma pack(pop)
	
	
	class DELPHICLASS TEnumerator;
	// Template declaration generated by Delphi parameterized types is
	// used only for accessing Delphi variables and fields.
	// Don't instantiate with new type parameters in user code.
	class PASCALIMPLEMENTATION TEnumerator : public  ::Mitov::Containers::Utils::TBasicEnumerator__1<T>
	{
		typedef  ::Mitov::Containers::Utils::TBasicEnumerator__1<T> inherited;
		
	protected:
		 ::System::DelphiInterface<ILinkedList__1<T> > FList;
		typename TLinkedList__1<T>::TNode::PPNode FPFirstNode;
		typename TLinkedList__1<T>::TNode::PPNode FPNode;
		
	public:
		virtual void __fastcall Reset();
		virtual bool __fastcall MoveNext();
		virtual T __fastcall GenericGetCurrent();
		__fastcall TEnumerator(TLinkedList__1<T>* AList);
		__fastcall virtual ~TEnumerator();
	};
	
	
	
protected:
	unsigned FCountEnumerotors;
	bool FHasDeleted;
	typename TNode::PNode FFirst;
	typename TNode::PNode FLast;
	int FCount;
	 ::System::DelphiInterface< ::System::Generics::Defaults::IComparer__1<T> > FComparer;
	
private:
	__classmethod  ::System::DelphiInterface<ILinkedList__1<T> > __fastcall CreateList();
	__classmethod void __fastcall AddQueryListItem(const  ::System::DelphiInterface<ILinkedList__1<T> > AList, const T AItem);
	void __fastcall InternalClear();
	
protected:
	void __fastcall EnumeratorDeleted();
	int __fastcall GetCount();
	T __fastcall Last()/* overload */;
	bool __fastcall Last(/* out */ T &ARes)/* overload */;
	 ::System::DelphiInterface<ILinkedList__1<T> > __fastcall ForLast(const  ::System::DelphiInterface< ::Mitov::Containers::Common::TConstProc__1<T> > AProc);
	T __fastcall PopFirst()/* overload */;
	 ::System::DelphiInterface<ILinkedList__1<T> > __fastcall PopFirst(/* out */ T &ARes)/* overload */;
	 ::System::DelphiInterface<ILinkedList__1<T> > __fastcall PopFirst(const  ::System::DelphiInterface< ::Mitov::Containers::Common::TConstProc__1<T> > AProc)/* overload */;
	bool __fastcall IfPopFirst(/* out */ T &ARes)/* overload */;
	bool __fastcall IfPopFirst(const  ::System::DelphiInterface< ::Mitov::Containers::Common::TConstProc__1<T> > AProc)/* overload */;
	 ::System::DelphiInterface<ILinkedList__1<T> > __fastcall AddFirst(const T AItem);
	void __fastcall ProcedureAdd(const T AItem);
	 ::System::DelphiInterface<ILinkedList__1<T> > __fastcall Add(const T AItem, unsigned ACount = (unsigned)(0x1));
	 ::System::DelphiInterface<ILinkedList__1<T> > __fastcall AddUnique(const T AItem);
	 ::System::DelphiInterface<ILinkedList__1<T> > __fastcall Append(const  ::System::DelphiInterface< ::Mitov::Containers::Common::IEnumerable__1<T> > AOther)/* overload */;
	 ::System::DelphiInterface<ILinkedList__1<T> > __fastcall Append(const T *AItems, const int AItems_High)/* overload */;
	 ::System::DelphiInterface<ILinkedList__1<T> > __fastcall Append( ::System::Generics::Collections::TEnumerator__1<T>* const AEnumerator)/* overload */;
	 ::System::DelphiInterface<ILinkedList__1<T> > __fastcall Append(const  ::System::DelphiInterface< ::System::IEnumerator__1<T> > AEnumerator)/* overload */;
	 ::System::DelphiInterface<ILinkedList__1<T> > __fastcall Assign(const  ::System::DelphiInterface< ::Mitov::Containers::Common::IEnumerable__1<T> > AOther);
	bool __fastcall FindAndRemoveOne(const T AItem)/* overload */;
	bool __fastcall FindAndRemoveOne(const  ::System::DelphiInterface< ::Mitov::Containers::Common::TConstFunc__2<T,bool> > ACompareFunc, /* out */ T &ARes)/* overload */;
	 ::System::DelphiInterface<ILinkedList__1<T> > __fastcall FindAndRemoveOne(const  ::System::DelphiInterface< ::Mitov::Containers::Common::TConstFunc__2<T,bool> > ACompareFunc, const  ::System::DelphiInterface< ::Mitov::Containers::Common::TConstProc__1<T> > AFoundProc)/* overload */;
	 ::System::DelphiInterface<ILinkedList__1<T> > __fastcall RemoveOne(const T AItem)/* overload */;
	 ::System::DelphiInterface<ILinkedList__1<T> > __fastcall RemoveOne(const  ::System::DelphiInterface< ::Mitov::Containers::Common::TConstFunc__2<T,bool> > ACompareFunc)/* overload */;
	 ::System::DelphiInterface<ILinkedList__1<T> > __fastcall RemoveAll(const T AItem)/* overload */;
	 ::System::DelphiInterface<ILinkedList__1<T> > __fastcall RemoveAll(const  ::System::DelphiInterface< ::Mitov::Containers::Common::TConstFunc__2<T,bool> > ACompareFunc, const  ::System::DelphiInterface< ::Mitov::Containers::Common::TConstProc__1<T> > AFoundProc = ( ::System::DelphiInterface< ::Mitov::Containers::Common::TConstProc__1<T> >)(0x0))/* overload */;
	 ::System::DelphiInterface<ILinkedList__1<T> > __fastcall Clear();
	T __fastcall FindOrAdd(const  ::System::DelphiInterface< ::Mitov::Containers::Common::TConstFunc__2<T,bool> > ACompareFunc, const  ::System::DelphiInterface< ::System::Sysutils::TFunc__1<T> > ACreateFunc)/* overload */;
	T __fastcall FindOrAdd(const  ::System::DelphiInterface< ::Mitov::Containers::Common::TConstFunc__2<T,bool> > ACompareFunc, const T AItem)/* overload */;
	 ::System::DelphiInterface< ::Mitov::Containers::Common::IContainerQuery__3< ::System::DelphiInterface<ILinkedList__1<T> >, ::System::DelphiInterface<ILinkedList__1<T> >,T> > __fastcall Query();
	
public:
	virtual  ::System::DelphiInterface< ::System::IEnumerator__1<T> > __fastcall GetEnumerator();
	virtual  ::System::DelphiInterface< ::System::IEnumerator__1< ::System::Rtti::TValue> > __fastcall GetValueEnumerator();
	virtual void __fastcall AddValue(const  ::System::Rtti::TValue &AValue);
	virtual void __fastcall ClearValues();
	virtual  ::System::Rtti::TValue __fastcall GetNewValue();
	__fastcall TLinkedList__1();
	__fastcall TLinkedList__1( ::System::Generics::Collections::TEnumerator__1<T>* const AEnumerator)/* overload */;
	__fastcall TLinkedList__1(const  ::System::DelphiInterface< ::System::IEnumerator__1<T> > AEnumerator)/* overload */;
	__fastcall TLinkedList__1(const  ::System::DelphiInterface<ILinkedList__1<T> > AOther);
	__fastcall virtual ~TLinkedList__1();
private:
	void *__IList;	//  ::Mitov::Containers::Common::IList 
	void *__ILinkedList__1;	// ILinkedList__1<T> 
	
public:
	#if defined(MANAGED_INTERFACE_OPERATORS)
	// {EEFAD71F-D914-4F0B-A092-DBE8223F48CA}
	operator  ::Mitov::Containers::Common::_di_IList()
	{
		 ::Mitov::Containers::Common::_di_IList intf;
		this->GetInterface(intf);
		return intf;
	}
	#else
	operator  ::Mitov::Containers::Common::IList*(void) { return ( ::Mitov::Containers::Common::IList*)&__IList; }
	#endif
	#if defined(MANAGED_INTERFACE_OPERATORS)
	// {CAFEC3AE-090E-4135-849E-B39A213C7231}
	operator  ::System::DelphiInterface< ::Mitov::Containers::Common::IEnumerable__1<T> >()
	{
		 ::System::DelphiInterface< ::Mitov::Containers::Common::IEnumerable__1<T> > intf;
		this->GetInterface(intf);
		return intf;
	}
	#else
	operator  ::Mitov::Containers::Common::IEnumerable__1<T>*(void) { return ( ::Mitov::Containers::Common::IEnumerable__1<T>*)&__ILinkedList__1; }
	#endif
	#if defined(MANAGED_INTERFACE_OPERATORS)
	// {755EACF6-A7BC-4EA5-AF72-A6FC7D7155C2}
	operator  ::System::DelphiInterface<ILinkedList__1<T> >()
	{
		 ::System::DelphiInterface<ILinkedList__1<T> > intf;
		this->GetInterface(intf);
		return intf;
	}
	#else
	operator ILinkedList__1<T>*(void) { return (ILinkedList__1<T>*)&__ILinkedList__1; }
	#endif
	
};

#pragma pack(pop)

#pragma pack(push,4)
// Template declaration generated by Delphi parameterized types is
// used only for accessing Delphi variables and fields.
// Don't instantiate with new type parameters in user code.
template<typename T> class PASCALIMPLEMENTATION TArrayList__1 : public TTypedInterfacedChangeNotifyObject__1<T>
{
	typedef TTypedInterfacedChangeNotifyObject__1<T> inherited;
	
private:
	__classmethod  ::System::DelphiInterface<IArrayList__1<T> > __fastcall CreateList();
	__classmethod void __fastcall AddQueryListItem(const  ::System::DelphiInterface<IArrayList__1<T> > AList, const T AItem);
	
protected:
	 ::System::Generics::Collections::TList__1<T>* FList;
	 ::System::DelphiInterface< ::System::Generics::Defaults::IComparer__1<T> > FComparer;
	
public:
	virtual  ::System::DelphiInterface< ::System::IEnumerator__1<T> > __fastcall GetEnumerator();
	virtual  ::System::DelphiInterface< ::System::IEnumerator__1<T> > __fastcall GetReverseEnumerator();
	virtual  ::System::DelphiInterface< ::System::IEnumerator__1< ::System::Rtti::TValue> > __fastcall GetValueEnumerator();
	virtual void __fastcall AddValue(const  ::System::Rtti::TValue &AValue);
	virtual void __fastcall ClearValues();
	virtual  ::System::Rtti::TValue __fastcall GetNewValue();
	virtual  ::System::DelphiInterface< ::Mitov::Containers::Common::IReverseEnumeratorHost__1<T> > __fastcall GetReverse();
	virtual int __fastcall GetCount();
	virtual T __fastcall GetItem(int AIndex);
	void __fastcall SetItem(int AIndex, const T AItem);
	 ::System::DelphiInterface<IArrayList__1<T> > __fastcall Add(const T AItem, unsigned ACount = (unsigned)(0x1));
	virtual void __fastcall ProcedureAdd(const T AItem);
	 ::System::DelphiInterface<IArrayList__1<T> > __fastcall Insert(int AIndex, const T AItem)/* overload */;
	 ::System::DelphiInterface<IArrayList__1<T> > __fastcall Insert(int AIndex, const  ::System::DelphiInterface< ::Mitov::Containers::Common::IEnumerable__1<T> > AOther)/* overload */;
	 ::System::DelphiInterface<IArrayList__1<T> > __fastcall Delete(int AIndex)/* overload */;
	 ::System::DelphiInterface<IArrayList__1<T> > __fastcall Delete(int AIndex, int ACount)/* overload */;
	virtual  ::System::DelphiInterface<IArrayList__1<T> > __fastcall AddFront(const T AItem);
	 ::System::DelphiInterface<IArrayList__1<T> > __fastcall AddUnique(const T AItem);
	virtual int __fastcall RemoveOne(const T AItem)/* overload */;
	T __fastcall FindOrAdd(const  ::System::DelphiInterface< ::Mitov::Containers::Common::TConstFunc__2<T,bool> > ACompareFunc, const  ::System::DelphiInterface< ::System::Sysutils::TFunc__1<T> > ACreateFunc)/* overload */;
	T __fastcall FindOrAdd(const  ::System::DelphiInterface< ::Mitov::Containers::Common::TConstFunc__2<T,bool> > ACompareFunc, const T AItem)/* overload */;
	bool __fastcall FindAndRemoveOne(const T AItem)/* overload */;
	bool __fastcall FindAndRemoveOne(const  ::System::DelphiInterface< ::Mitov::Containers::Common::TConstFunc__2<T,bool> > ACompareFunc, /* out */ T &ARes)/* overload */;
	 ::System::DelphiInterface<IArrayList__1<T> > __fastcall FindAndRemoveOne(const  ::System::DelphiInterface< ::Mitov::Containers::Common::TConstFunc__2<T,bool> > ACompareFunc, const  ::System::DelphiInterface< ::Mitov::Containers::Common::TConstProc__1<T> > AFoundProc)/* overload */;
	virtual  ::System::DelphiInterface<IArrayList__1<T> > __fastcall RemoveOne(const  ::System::DelphiInterface< ::Mitov::Containers::Common::TConstFunc__2<T,bool> > ACompareFunc)/* overload */;
	bool __fastcall IfRemoveOne(const  ::System::DelphiInterface< ::Mitov::Containers::Common::TConstFunc__2<T,bool> > ACompareFunc)/* overload */;
	virtual  ::System::DelphiInterface<IArrayList__1<T> > __fastcall RemoveAll(const  ::System::DelphiInterface< ::Mitov::Containers::Common::TConstFunc__2<T,bool> > ACompareFunc, const  ::System::DelphiInterface< ::Mitov::Containers::Common::TConstProc__1<T> > AFoundProc = ( ::System::DelphiInterface< ::Mitov::Containers::Common::TConstProc__1<T> >)(0x0))/* overload */;
	 ::System::DelphiInterface<IArrayList__1<T> > __fastcall RemoveAll(const  ::System::DelphiInterface< ::Mitov::Containers::Common::IEnumerable__1<T> > AOther)/* overload */;
	virtual  ::System::DelphiInterface<IArrayList__1<T> > __fastcall RemoveAll(const T AItem)/* overload */;
	 ::System::DelphiInterface<IArrayList__1<T> > __fastcall Swap(int AIndex1, int AIndex2);
	 ::System::DelphiInterface<IArrayList__1<T> > __fastcall Clear();
	 ::System::DelphiInterface<IArrayList__1<T> > __fastcall Sort(const  ::System::DelphiInterface< ::System::Generics::Defaults::TComparison__1<T> > ACompareFunc = ( ::System::DelphiInterface< ::System::Generics::Defaults::TComparison__1<T> >)(0x0))/* overload */;
	 ::System::DelphiInterface<IArrayList__1<T> > __fastcall Append(const  ::System::DelphiInterface< ::Mitov::Containers::Common::IEnumerable__1<T> > AOther)/* overload */;
	 ::System::DelphiInterface<IArrayList__1<T> > __fastcall Append(const T *AItems, const int AItems_High)/* overload */;
	 ::System::DelphiInterface<IArrayList__1<T> > __fastcall Append( ::System::Generics::Collections::TEnumerator__1<T>* const AEnumerator)/* overload */;
	 ::System::DelphiInterface<IArrayList__1<T> > __fastcall Append(const  ::System::DelphiInterface< ::System::IEnumerator__1<T> > AEnumerator)/* overload */;
	 ::System::DelphiInterface<IArrayList__1<T> > __fastcall Assign(const  ::System::DelphiInterface< ::Mitov::Containers::Common::IEnumerable__1<T> > AOther);
	 ::System::DynamicArray<T> __fastcall ToArray();
	 ::System::DelphiInterface< ::Mitov::Containers::Common::IContainerQuery__3< ::System::DelphiInterface<IArrayList__1<T> >, ::System::DelphiInterface<IArrayList__1<T> >,T> > __fastcall Query(bool AReverse = false);
	template<typename T_COLLECTION> __classmethod  ::System::DelphiInterface< ::Mitov::Containers::Common::IContainerQuery__3<T_COLLECTION, ::System::DelphiInterface<IArrayList__1<T> >,T> > __fastcall CreateQuery(const T_COLLECTION ACollection, const  ::System::DelphiInterface< ::System::Sysutils::TFunc__1< ::System::DelphiInterface< ::System::IEnumerator__1<T> > > > ACreateEnumerator);
	__fastcall TArrayList__1();
	__fastcall TArrayList__1( ::System::Generics::Collections::TEnumerator__1<T>* const AEnumerator)/* overload */;
	__fastcall TArrayList__1(const  ::System::DelphiInterface< ::System::IEnumerator__1<T> > AEnumerator)/* overload */;
	__fastcall TArrayList__1(const  ::System::DelphiInterface<IArrayList__1<T> > AOther);
	__fastcall TArrayList__1(const T *AOther, const int AOther_High);
	__fastcall virtual ~TArrayList__1();
private:
	void *__IList;	//  ::Mitov::Containers::Common::IList 
	void *__IArrayList__1;	// IArrayList__1<T> 
	
public:
	#if defined(MANAGED_INTERFACE_OPERATORS)
	// {EEFAD71F-D914-4F0B-A092-DBE8223F48CA}
	operator  ::Mitov::Containers::Common::_di_IList()
	{
		 ::Mitov::Containers::Common::_di_IList intf;
		this->GetInterface(intf);
		return intf;
	}
	#else
	operator  ::Mitov::Containers::Common::IList*(void) { return ( ::Mitov::Containers::Common::IList*)&__IList; }
	#endif
	#if defined(MANAGED_INTERFACE_OPERATORS)
	// {CAFEC3AE-090E-4135-849E-B39A213C7231}
	operator  ::System::DelphiInterface< ::Mitov::Containers::Common::IEnumerable__1<T> >()
	{
		 ::System::DelphiInterface< ::Mitov::Containers::Common::IEnumerable__1<T> > intf;
		this->GetInterface(intf);
		return intf;
	}
	#else
	operator  ::Mitov::Containers::Common::IEnumerable__1<T>*(void) { return ( ::Mitov::Containers::Common::IEnumerable__1<T>*)&__IArrayList__1; }
	#endif
	#if defined(MANAGED_INTERFACE_OPERATORS)
	// {D95A8112-779C-4B45-BE62-BA12D4E6D28F}
	operator  ::System::DelphiInterface< ::Mitov::Containers::Common::IReverseEnumerable__1<T> >()
	{
		 ::System::DelphiInterface< ::Mitov::Containers::Common::IReverseEnumerable__1<T> > intf;
		this->GetInterface(intf);
		return intf;
	}
	#else
	operator  ::Mitov::Containers::Common::IReverseEnumerable__1<T>*(void) { return ( ::Mitov::Containers::Common::IReverseEnumerable__1<T>*)&__IArrayList__1; }
	#endif
	#if defined(MANAGED_INTERFACE_OPERATORS)
	// {B15CDC27-7A72-49FC-A4C4-FC8F6B74D246}
	operator  ::System::DelphiInterface<IArrayList__1<T> >()
	{
		 ::System::DelphiInterface<IArrayList__1<T> > intf;
		this->GetInterface(intf);
		return intf;
	}
	#else
	operator IArrayList__1<T>*(void) { return (IArrayList__1<T>*)&__IArrayList__1; }
	#endif
	
};

#pragma pack(pop)

__interface  INTERFACE_UUID("{9937B5DE-E531-403A-8E2B-E95BF33BA056}") IStringArrayList  : public IArrayList__1< ::System::UnicodeString> 
{
	HIDESBASE virtual _di_IStringArrayList __fastcall AddUnique(const  ::System::UnicodeString AValue) = 0 ;
	virtual _di_IStringArrayList __fastcall AppendUnique(const  ::System::DelphiInterface< ::Mitov::Containers::Common::IEnumerable__1< ::System::UnicodeString> > AOther) = 0 /* overload */;
	virtual _di_IStringArrayList __fastcall AppendUnique(const  ::System::UnicodeString *AItems, const int AItems_High) = 0 /* overload */;
	HIDESBASE virtual _di_IStringArrayList __fastcall Sort() = 0 /* overload */;
	virtual  ::System::UnicodeString __fastcall AsText() = 0 /* overload */;
	virtual _di_IStringArrayList __fastcall AsText(/* out */  ::System::UnicodeString &AText) = 0 /* overload */;
	virtual _di_IStringArrayList __fastcall ToStrings( ::System::Classes::TStrings* AStrings, bool AAppend = false) = 0 ;
	virtual _di_IStringArrayList __fastcall FromStrings( ::System::Classes::TStrings* const AStrings, bool AAppend = false) = 0 ;
	virtual _di_IStringArrayList __fastcall FromText(const  ::System::UnicodeString AText) = 0 ;
	virtual  ::System::UnicodeString __fastcall AsDelimiterText(const  ::System::UnicodeString ADelimiter) = 0 /* overload */;
	virtual _di_IStringArrayList __fastcall AsDelimiterText(const  ::System::UnicodeString ADelimiter, /* out */  ::System::UnicodeString &AText) = 0 /* overload */;
	virtual _di_IStringArrayList __fastcall FromDelimiterText(const  ::System::UnicodeString AText, const  ::System::UnicodeString ADelimiter) = 0 /* overload */;
	virtual _di_IStringArrayList __fastcall FromDelimiterText(const  ::System::UnicodeString AText, const  ::System::UnicodeString *ADelimiters, const int ADelimiters_High) = 0 /* overload */;
	virtual _di_IStringArrayList __fastcall FromDelimiterStringText(const  ::System::UnicodeString AText, const  ::System::UnicodeString *ADelimiters, const int ADelimiters_High) = 0 ;
	virtual _di_IStringArrayList __fastcall LoadFromFile(const  ::System::UnicodeString AFileName, bool AAppend = false) = 0 ;
	virtual _di_IStringArrayList __fastcall SaveToFile(const  ::System::UnicodeString AFileName) = 0 /* overload */;
	virtual _di_IStringArrayList __fastcall SaveToFile(const  ::System::UnicodeString AFileName,  ::System::Sysutils::TEncoding* AEncoding) = 0 /* overload */;
	virtual _di_IStringArrayList __fastcall LoadFromStream( ::System::Classes::TStream* AStream, bool AAppend = false) = 0 ;
	virtual _di_IStringArrayList __fastcall SaveToStream( ::System::Classes::TStream* AStream) = 0 /* overload */;
	virtual _di_IStringArrayList __fastcall SaveToStream( ::System::Classes::TStream* AStream,  ::System::Sysutils::TEncoding* AEncoding) = 0 /* overload */;
};

#pragma pack(push,4)
class PASCALIMPLEMENTATION TStringArrayList : public TArrayList__1< ::System::UnicodeString>
{
	typedef TArrayList__1< ::System::UnicodeString> inherited;
	
public:
	HIDESBASE _di_IStringArrayList __fastcall AddUnique(const  ::System::UnicodeString AValue);
	_di_IStringArrayList __fastcall AppendUnique(const  ::System::DelphiInterface< ::Mitov::Containers::Common::IEnumerable__1< ::System::UnicodeString> > AOther)/* overload */;
	_di_IStringArrayList __fastcall AppendUnique(const  ::System::UnicodeString *AItems, const int AItems_High)/* overload */;
	HIDESBASE _di_IStringArrayList __fastcall Sort()/* overload */;
	 ::System::UnicodeString __fastcall AsText()/* overload */;
	_di_IStringArrayList __fastcall AsText(/* out */  ::System::UnicodeString &AText)/* overload */;
	_di_IStringArrayList __fastcall ToStrings( ::System::Classes::TStrings* AStrings, bool AAppend = false);
	_di_IStringArrayList __fastcall FromStrings( ::System::Classes::TStrings* const AStrings, bool AAppend = false);
	_di_IStringArrayList __fastcall FromText(const  ::System::UnicodeString AText);
	 ::System::UnicodeString __fastcall AsDelimiterText(const  ::System::UnicodeString ADelimiter)/* overload */;
	_di_IStringArrayList __fastcall AsDelimiterText(const  ::System::UnicodeString ADelimiter, /* out */  ::System::UnicodeString &AText)/* overload */;
	_di_IStringArrayList __fastcall FromDelimiterText(const  ::System::UnicodeString AText, const  ::System::UnicodeString ADelimiter)/* overload */;
	_di_IStringArrayList __fastcall FromDelimiterText(const  ::System::UnicodeString AText, const  ::System::UnicodeString *ADelimiters, const int ADelimiters_High)/* overload */;
	_di_IStringArrayList __fastcall FromDelimiterStringText(const  ::System::UnicodeString AText, const  ::System::UnicodeString *ADelimiters, const int ADelimiters_High);
	_di_IStringArrayList __fastcall LoadFromFile(const  ::System::UnicodeString AFileName, bool AAppend = false);
	_di_IStringArrayList __fastcall SaveToFile(const  ::System::UnicodeString AFileName)/* overload */;
	_di_IStringArrayList __fastcall SaveToFile(const  ::System::UnicodeString AFileName,  ::System::Sysutils::TEncoding* AEncoding)/* overload */;
	_di_IStringArrayList __fastcall LoadFromStream( ::System::Classes::TStream* AStream, bool AAppend = false);
	_di_IStringArrayList __fastcall SaveToStream( ::System::Classes::TStream* AStream)/* overload */;
	_di_IStringArrayList __fastcall SaveToStream( ::System::Classes::TStream* AStream,  ::System::Sysutils::TEncoding* AEncoding)/* overload */;
	_di_IStringArrayList __fastcall AsInterface();
	__fastcall TStringArrayList( ::System::Classes::TStrings* const AStrings);
	__fastcall TStringArrayList(const  ::System::UnicodeString AText);
	__fastcall TStringArrayList(const  ::System::UnicodeString AText, const  ::System::UnicodeString ADelimiter)/* overload */;
	__fastcall TStringArrayList(const  ::System::UnicodeString AText, const  ::System::UnicodeString *ADelimiters, const int ADelimiters_High)/* overload */;
public:
	/* {Mitov_Containers_List}TArrayList<System_string>.Create */ inline __fastcall TStringArrayList() : TArrayList__1< ::System::UnicodeString>() { }
	/* {Mitov_Containers_List}TArrayList<System_string>.CreateEnumerator */ inline __fastcall TStringArrayList( ::System::Generics::Collections::TEnumerator__1< ::System::UnicodeString>* const AEnumerator)/* overload */ : TArrayList__1< ::System::UnicodeString>(AEnumerator) { }
	/* {Mitov_Containers_List}TArrayList<System_string>.CreateEnumerator */ inline __fastcall TStringArrayList(const  ::System::DelphiInterface< ::System::IEnumerator__1< ::System::UnicodeString> > AEnumerator)/* overload */ : TArrayList__1< ::System::UnicodeString>(AEnumerator) { }
	/* {Mitov_Containers_List}TArrayList<System_string>.CreateCopy */ inline __fastcall TStringArrayList(const  ::System::DelphiInterface<IArrayList__1< ::System::UnicodeString> > AOther) : TArrayList__1< ::System::UnicodeString>(AOther) { }
	/* {Mitov_Containers_List}TArrayList<System_string>.CreateArray */ inline __fastcall TStringArrayList(const  ::System::UnicodeString *AOther, const int AOther_High) : TArrayList__1< ::System::UnicodeString>(AOther, AOther_High) { }
	/* {Mitov_Containers_List}TArrayList<System_string>.Destroy */ inline __fastcall virtual ~TStringArrayList() { }
	
	/* Hoisted overloads: */
	
public:
	inline  ::System::DelphiInterface<IArrayList__1< ::System::UnicodeString> > __fastcall  Sort(const  ::System::DelphiInterface< ::System::Generics::Defaults::TComparison__1< ::System::UnicodeString> > ACompareFunc){ return TArrayList__1< ::System::UnicodeString>::Sort(ACompareFunc); }
	
private:
	void *__IStringArrayList;	// IStringArrayList 
	
public:
	#if defined(MANAGED_INTERFACE_OPERATORS)
	// {9937B5DE-E531-403A-8E2B-E95BF33BA056}
	operator _di_IStringArrayList()
	{
		_di_IStringArrayList intf;
		this->GetInterface(intf);
		return intf;
	}
	#else
	operator IStringArrayList*(void) { return (IStringArrayList*)&__IStringArrayList; }
	#endif
	
};

#pragma pack(pop)

__interface  INTERFACE_UUID("{D77626EE-0200-482B-AF86-CBE20FDDECCE}") IObjectArrayList  : public IArrayList__1< ::System::TObject*> 
{
	
};

#pragma pack(push,4)
class PASCALIMPLEMENTATION TObjectArrayList : public TArrayList__1< ::System::TObject*>
{
	typedef TArrayList__1< ::System::TObject*> inherited;
	
public:
	_di_IObjectArrayList __fastcall AsInterface();
public:
	/* {Mitov_Containers_List}TArrayList<System_TObject>.Create */ inline __fastcall TObjectArrayList() : TArrayList__1< ::System::TObject*>() { }
	/* {Mitov_Containers_List}TArrayList<System_TObject>.CreateEnumerator */ inline __fastcall TObjectArrayList( ::System::Generics::Collections::TEnumerator__1< ::System::TObject*>* const AEnumerator)/* overload */ : TArrayList__1< ::System::TObject*>(AEnumerator) { }
	/* {Mitov_Containers_List}TArrayList<System_TObject>.CreateEnumerator */ inline __fastcall TObjectArrayList(const  ::System::DelphiInterface< ::System::IEnumerator__1< ::System::TObject*> > AEnumerator)/* overload */ : TArrayList__1< ::System::TObject*>(AEnumerator) { }
	/* {Mitov_Containers_List}TArrayList<System_TObject>.CreateCopy */ inline __fastcall TObjectArrayList(const  ::System::DelphiInterface<IArrayList__1< ::System::TObject*> > AOther) : TArrayList__1< ::System::TObject*>(AOther) { }
	/* {Mitov_Containers_List}TArrayList<System_TObject>.CreateArray */ inline __fastcall TObjectArrayList( ::System::TObject* const *AOther, const int AOther_High) : TArrayList__1< ::System::TObject*>(AOther, AOther_High) { }
	/* {Mitov_Containers_List}TArrayList<System_TObject>.Destroy */ inline __fastcall virtual ~TObjectArrayList() { }
	
private:
	void *__IObjectArrayList;	// IObjectArrayList 
	
public:
	#if defined(MANAGED_INTERFACE_OPERATORS)
	// {D77626EE-0200-482B-AF86-CBE20FDDECCE}
	operator _di_IObjectArrayList()
	{
		_di_IObjectArrayList intf;
		this->GetInterface(intf);
		return intf;
	}
	#else
	operator IObjectArrayList*(void) { return (IObjectArrayList*)&__IObjectArrayList; }
	#endif
	
};

#pragma pack(pop)

#pragma pack(push,4)
class PASCALIMPLEMENTATION Algorithm : public  ::System::TObject
{
	typedef  ::System::TObject inherited;
	
public:
	template<typename T> static bool __fastcall BinarySearch(const  ::System::DelphiInterface<IArrayList__1<T> > AList, const  ::System::DelphiInterface< ::Mitov::Containers::Common::TConstFunc__2<T,int> > ACompareFunc, /* out */ T &AItem)/* overload */;
	template<typename T> static bool __fastcall BinarySearch(const  ::System::DelphiInterface<IArrayList__1<T> > AList, const  ::System::DelphiInterface< ::Mitov::Containers::Common::TConstFunc__2<T,int> > ACompareFunc, /* out */ int &AFoundIndex)/* overload */;
	template<typename T> static bool __fastcall BinarySearch(const  ::System::DelphiInterface<IArrayList__1<T> > AList, const  ::System::DelphiInterface< ::Mitov::Containers::Common::TConstFunc__2<T,int> > ACompareFunc, const  ::System::DelphiInterface< ::Mitov::Containers::Common::TConstProc__1<T> > AFoundProc)/* overload */;
	template<typename T> static bool __fastcall BinarySearch(const  ::System::DelphiInterface<IArrayList__1<T> > AList, const  ::System::DelphiInterface< ::Mitov::Containers::Common::TConstFunc__2<T,int> > ACompareFunc)/* overload */;
	template<typename T> static int __fastcall CountOf(const  ::System::DelphiInterface< ::Mitov::Containers::Common::IEnumerable__1<T> > AEnumerable, const T AItem)/* overload */;
	template<typename T> static int __fastcall CountOf(const  ::System::DelphiInterface< ::Mitov::Containers::Common::IEnumerable__1<T> > AEnumerable, const  ::System::DelphiInterface< ::Mitov::Containers::Common::TConstFunc__2<T,bool> > ACompareFunc)/* overload */;
	template<typename T> static int __fastcall CountOf(const  ::System::DelphiInterface< ::System::IEnumerator__1<T> > AEnumerator, const T AItem)/* overload */;
	template<typename T> static int __fastcall CountOf(const  ::System::DelphiInterface< ::System::IEnumerator__1<T> > AEnumerator, const  ::System::DelphiInterface< ::Mitov::Containers::Common::TConstFunc__2<T,bool> > ACompareFunc)/* overload */;
	template<typename T> static bool __fastcall AllSame(const  ::System::DelphiInterface< ::Mitov::Containers::Common::IEnumerable__1<T> > AEnumerable)/* overload */;
	template<typename T> static bool __fastcall AllSame(const  ::System::DelphiInterface< ::Mitov::Containers::Common::IEnumerable__1<T> > AEnumerable, const  ::System::DelphiInterface< ::Mitov::Containers::Common::TConstFunc__2<T,bool> > ACompareFunc)/* overload */;
	template<typename T> static bool __fastcall AllSame(const  ::System::DelphiInterface< ::System::IEnumerator__1<T> > AEnumerator)/* overload */;
	template<typename T> static bool __fastcall AllSame(const  ::System::DelphiInterface< ::System::IEnumerator__1<T> > AEnumerator, const  ::System::DelphiInterface< ::Mitov::Containers::Common::TConstFunc__2<T,bool> > ACompareFunc)/* overload */;
public:
	/* TObject.Create */ inline __fastcall Algorithm() :  ::System::TObject() { }
	/* TObject.Destroy */ inline __fastcall virtual ~Algorithm() { }
	
};

#pragma pack(pop)

//-- var, const, procedure ---------------------------------------------------
}	/* namespace List */
}	/* namespace Containers */
}	/* namespace Mitov */

//-- user supplied -----------------------------------------------------------
#ifdef __OLD__MANAGED_INTERFACE_OPERATORS__
  #define MANAGED_INTERFACE_OPERATORS
  #undef __OLD__MANAGED_INTERFACE_OPERATORS__
#endif // __OLD__MANAGED_INTERFACE_OPERATORS__

#pragma pack(pop)
#pragma option pop

#pragma delphiheader end.
//-- end unit ----------------------------------------------------------------
#endif	// Mitov_Containers_ListHPP
