// CodeGear C++Builder
// Copyright (c) 1995, 2021 by Embarcadero Technologies, Inc.
// All rights reserved

// (DO NOT EDIT: machine generated header) 'Mitov.Containers.Utils.pas' rev: 35.00 (Windows)
// This file is modified to improve C++ Builder compatibility.

#ifndef Mitov_Containers_UtilsHPP
#define Mitov_Containers_UtilsHPP

#pragma delphiheader begin
#pragma option push
#pragma option -w-      // All warnings off
#pragma option -Vx      // Zero-length empty class member 
#pragma pack(push,8)
#include <System.hpp>
#include <SysInit.hpp>
#include <System.SysUtils.hpp>
#include <System.Rtti.hpp>
#include <Mitov.Containers.Common.hpp>

//-- user supplied -----------------------------------------------------------

namespace Mitov
{
namespace Containers
{
namespace Utils
{
//-- forward type declarations -----------------------------------------------
template<typename T> class DELPHICLASS TBasicEnumerator__1;
template<typename T> class DELPHICLASS TGenricValueEnumerator__1;
template<typename T> class DELPHICLASS TBasicListEnumerator__1;
template<typename T> class DELPHICLASS TBasicReverseListEnumerator__1;
template<typename T> class DELPHICLASS TReverseEnumeratorHost__1;
template<typename T> class DELPHICLASS TAutoReverseEnumeratorHost__1;
template<typename T> class DELPHICLASS TFilterEnumerator__1;
//-- type declarations -------------------------------------------------------
#pragma pack(push,4)
// Template declaration generated by Delphi parameterized types is
// used only for accessing Delphi variables and fields.
// Don't instantiate with new type parameters in user code.
template<typename T> class PASCALIMPLEMENTATION TBasicEnumerator__1 : public  ::System::TInterfacedObject
{
	typedef  ::System::TInterfacedObject inherited;
	
public:
	virtual void __fastcall Reset() = 0 ;
	virtual bool __fastcall MoveNext() = 0 ;
	virtual  ::System::TObject* __fastcall GetCurrent();
	virtual T __fastcall GenericGetCurrent() = 0 ;
public:
	/* TObject.Create */ inline __fastcall TBasicEnumerator__1() :  ::System::TInterfacedObject() { }
	/* TObject.Destroy */ inline __fastcall virtual ~TBasicEnumerator__1() { }
	
private:
	void *__IEnumerator__1;	//  ::System::IEnumerator__1<T> 
	
public:
	operator  ::System::IEnumerator__1<T>*(void) { return ( ::System::IEnumerator__1<T>*)&__IEnumerator__1; }
	
};

#pragma pack(pop)

#pragma pack(push,4)
// Template declaration generated by Delphi parameterized types is
// used only for accessing Delphi variables and fields.
// Don't instantiate with new type parameters in user code.
template<typename T> class PASCALIMPLEMENTATION TGenricValueEnumerator__1 : public TBasicEnumerator__1< ::System::Rtti::TValue>
{
	typedef TBasicEnumerator__1< ::System::Rtti::TValue> inherited;
	
protected:
	 ::System::DelphiInterface< ::System::IEnumerator__1<T> > FNestedEnumerator;
	
public:
	virtual void __fastcall Reset();
	virtual bool __fastcall MoveNext();
	virtual  ::System::Rtti::TValue __fastcall GenericGetCurrent();
	__fastcall TGenricValueEnumerator__1(const  ::System::DelphiInterface< ::System::IEnumerator__1<T> > ANestedEnumerator);
public:
	/* TObject.Destroy */ inline __fastcall virtual ~TGenricValueEnumerator__1() { }
	
};

#pragma pack(pop)

#pragma pack(push,4)
// Template declaration generated by Delphi parameterized types is
// used only for accessing Delphi variables and fields.
// Don't instantiate with new type parameters in user code.
template<typename T> class PASCALIMPLEMENTATION TBasicListEnumerator__1 : public TBasicEnumerator__1<T>
{
	typedef TBasicEnumerator__1<T> inherited;
	
protected:
	int FIndex;
	 ::System::DelphiInterface< ::System::Sysutils::TFunc__1<int> > FGetCount;
	 ::System::DelphiInterface< ::System::Sysutils::TFunc__2<int,T> > FGetItem;
	
public:
	virtual void __fastcall Reset();
	virtual bool __fastcall MoveNext();
	virtual T __fastcall GenericGetCurrent();
	__fastcall TBasicListEnumerator__1(const  ::System::DelphiInterface< ::System::Sysutils::TFunc__1<int> > AGetCount, const  ::System::DelphiInterface< ::System::Sysutils::TFunc__2<int,T> > AGetItem);
public:
	/* TObject.Destroy */ inline __fastcall virtual ~TBasicListEnumerator__1() { }
	
};

#pragma pack(pop)

#pragma pack(push,4)
// Template declaration generated by Delphi parameterized types is
// used only for accessing Delphi variables and fields.
// Don't instantiate with new type parameters in user code.
template<typename T> class PASCALIMPLEMENTATION TBasicReverseListEnumerator__1 : public TBasicListEnumerator__1<T>
{
	typedef TBasicListEnumerator__1<T> inherited;
	
public:
	virtual void __fastcall Reset();
	virtual bool __fastcall MoveNext();
	__fastcall TBasicReverseListEnumerator__1(const  ::System::DelphiInterface< ::System::Sysutils::TFunc__1<int> > AGetCount, const  ::System::DelphiInterface< ::System::Sysutils::TFunc__2<int,T> > AGetItem);
public:
	/* TObject.Destroy */ inline __fastcall virtual ~TBasicReverseListEnumerator__1() { }
	
};

#pragma pack(pop)

#pragma pack(push,4)
// Template declaration generated by Delphi parameterized types is
// used only for accessing Delphi variables and fields.
// Don't instantiate with new type parameters in user code.
template<typename T> class PASCALIMPLEMENTATION TReverseEnumeratorHost__1 : public  ::System::TInterfacedObject
{
	typedef  ::System::TInterfacedObject inherited;
	
protected:
	 ::System::DelphiInterface< ::System::Sysutils::TFunc__1< ::System::DelphiInterface< ::System::IEnumerator__1<T> > > > FCreate;
	
public:
	 ::System::DelphiInterface< ::System::IEnumerator__1<T> > __fastcall GetEnumerator();
	__fastcall TReverseEnumeratorHost__1(const  ::System::DelphiInterface< ::System::Sysutils::TFunc__1< ::System::DelphiInterface< ::System::IEnumerator__1<T> > > > ACreate);
public:
	/* TObject.Destroy */ inline __fastcall virtual ~TReverseEnumeratorHost__1() { }
	
private:
	void *__IReverseEnumeratorHost__1;	//  ::Mitov::Containers::Common::IReverseEnumeratorHost__1<T> 
	
public:
	#if defined(MANAGED_INTERFACE_OPERATORS)
	// {C6AAC7EC-5F44-41D0-BF9C-D2BE9BF7B351}
	operator  ::System::DelphiInterface< ::Mitov::Containers::Common::IReverseEnumeratorHost__1<T> >()
	{
		 ::System::DelphiInterface< ::Mitov::Containers::Common::IReverseEnumeratorHost__1<T> > intf;
		this->GetInterface(intf);
		return intf;
	}
	#else
	operator  ::Mitov::Containers::Common::IReverseEnumeratorHost__1<T>*(void) { return ( ::Mitov::Containers::Common::IReverseEnumeratorHost__1<T>*)&__IReverseEnumeratorHost__1; }
	#endif
	
};

#pragma pack(pop)

#pragma pack(push,4)
// Template declaration generated by Delphi parameterized types is
// used only for accessing Delphi variables and fields.
// Don't instantiate with new type parameters in user code.
template<typename T> class PASCALIMPLEMENTATION TAutoReverseEnumeratorHost__1 : public TReverseEnumeratorHost__1<T>
{
	typedef TReverseEnumeratorHost__1<T> inherited;
	
public:
	__fastcall TAutoReverseEnumeratorHost__1(const  ::System::DelphiInterface< ::System::Sysutils::TFunc__1<int> > AGetCount, const  ::System::DelphiInterface< ::System::Sysutils::TFunc__2<int,T> > AGetItem);
public:
	/* TObject.Destroy */ inline __fastcall virtual ~TAutoReverseEnumeratorHost__1() { }
	
};

#pragma pack(pop)

#pragma pack(push,4)
// Template declaration generated by Delphi parameterized types is
// used only for accessing Delphi variables and fields.
// Don't instantiate with new type parameters in user code.
template<typename T> class PASCALIMPLEMENTATION TFilterEnumerator__1 : public TBasicEnumerator__1<T>
{
	typedef TBasicEnumerator__1<T> inherited;
	
protected:
	 ::System::DelphiInterface< ::System::IEnumerator__1<T> > FEnumerator;
	 ::System::DelphiInterface< ::System::Sysutils::TFunc__2<T,bool> > FFilter;
	
public:
	virtual void __fastcall Reset();
	virtual bool __fastcall MoveNext();
	virtual T __fastcall GenericGetCurrent();
	__fastcall TFilterEnumerator__1(const  ::System::DelphiInterface< ::System::IEnumerator__1<T> > AEnumerator, const  ::System::DelphiInterface< ::System::Sysutils::TFunc__2<T,bool> > AFilter);
public:
	/* TObject.Destroy */ inline __fastcall virtual ~TFilterEnumerator__1() { }
	
};

#pragma pack(pop)

//-- var, const, procedure ---------------------------------------------------
}	/* namespace Utils */
}	/* namespace Containers */
}	/* namespace Mitov */
#pragma pack(pop)
#pragma option pop

#pragma delphiheader end.
//-- end unit ----------------------------------------------------------------
#endif	// Mitov_Containers_UtilsHPP
